name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libsm6 libxext6 libxrender-dev libglib2.0-0
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist codecov
          
      - name: Install package in development mode
        run: |
          pip install -e .
          
      - name: Run linting checks
        run: |
          # Install linting tools
          pip install flake8 black isort mypy
          
          # Check code formatting
          black --check src/ tests/
          
          # Check import sorting
          isort --check-only src/ tests/
          
          # Check code style
          flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
          
          # Type checking (optional, don't fail on mypy errors yet)
          mypy src/ || true
          
      - name: Run tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=85 \
            --junitxml=pytest-results.xml \
            -v \
            --tb=short \
            --maxfail=10
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/
            
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
            
  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event.pull_request.base.ref == 'main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libsm6 libxext6 libxrender-dev libglib2.0-0
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          pip install -e .
          
      - name: Download test video
        run: |
          mkdir -p test_assets
          # Download a small test video (replace with actual test asset)
          curl -L "https://sample-videos.com/zip/10/mp4/SampleVideo_360x240_1mb.mp4" \
            -o test_assets/sample_video.mp4 || echo "Warning: Could not download test video"
            
      - name: Run integration tests
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          # Run integration tests if they exist
          if [ -d "tests/integration" ]; then
            pytest tests/integration/ -v --tb=short
          else
            echo "No integration tests found, skipping..."
          fi
          
      - name: Test CLI functionality
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          # Test basic CLI functionality
          python -m src.main --help || echo "CLI help test completed"
          
  security-scan:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          
      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          
      - name: Check for known security vulnerabilities
        run: |
          safety check --json || true
          
      - name: Run static security analysis
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            
  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "Unit tests failed!"
            exit 1
          fi
          
          if [ "${{ needs.integration-test.result }}" != "success" ] && [ "${{ needs.integration-test.result }}" != "skipped" ]; then
            echo "Integration tests failed!"
            exit 1
          fi
          
          echo "All quality gates passed! ‚úÖ"
          
      - name: Post quality summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const testResult = '${{ needs.test.result }}';
            const integrationResult = '${{ needs.integration-test.result }}';
            
            let summary = '## üß™ Test Results Summary\n\n';
            summary += `- **Unit Tests**: ${testResult === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED'}\n`;
            summary += `- **Integration Tests**: ${integrationResult === 'success' ? '‚úÖ PASSED' : integrationResult === 'skipped' ? '‚è≠Ô∏è SKIPPED' : '‚ùå FAILED'}\n`;
            
            if (testResult === 'success' && (integrationResult === 'success' || integrationResult === 'skipped')) {
              summary += '\nüéâ All tests passed! Ready for merge.';
            } else {
              summary += '\n‚ö†Ô∏è Some tests failed. Please review before merging.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            }); 